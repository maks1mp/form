{"version":3,"sources":["types.ts","form/components/Select.tsx","form/components/Radio.tsx","form/components/Serial.tsx","form/components/States.tsx","form/helpers/index.ts","form/components/index.tsx","App.tsx","form/hooks/useForm.ts","reportWebVitals.ts","index.tsx"],"names":["Types","Sections","Select","name","id","values","as","map","v","value","label","Radio","role","type","Serial","field","form","useState","setValue","submitted","setSubmitted","check","setCheck","loading","setLoading","validate","useCallback","a","Promise","resolve","reject","console","log","setTimeout","Math","random","valid","submitIfValid","setFieldValue","onClick","disabled","Boolean","onKeyDown","e","key","onBlur","onChange","target","States","country","states","setStates","fetch","cache","response","json","data","Object","entries","useEffect","fetchStates","options","option","isDisabled","createFormValues","fields","reduce","acc","next","default","createFormValidation","fieldsValidation","f","yup","product","required","nullable","email","shape","FormContent","handleSubmit","children","fieldMeta","description","initialValues","validationSchema","onSubmit","formik","style","marginBottom","marginTop","join","textInput","phone","serialNumber","component","file","accept","event","files","checkboxes","restProps","dropdown","date","selected","Date","dateFormat","className","toString","render","cacheOptions","formatOptionLabel","props","display","alignItems","width","src","image","alt","title","isClearable","defaultOptions","isOptionSelected","selectValue","some","variantId","loadOptions","inputValue","defaultValue","filter","toLowerCase","includes","state","App","formData","setFormData","error","setError","fetchFormData","useForm","fulfilledOrder","setFulfilledOrder","visibleEdit","setVisibleEdit","Array","isArray","border","borderCollapse","find","d","order","index","i","textAlign","productPayload","prevState","customer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0da5979.chunk.js","sourcesContent":["export enum Types {\n  product = 'product',\n  serialNumber = 'serialNumber',\n  date = 'date',\n  file = 'file',\n  textInput = 'textInput',\n  email = 'email',\n  country = 'country',\n  state = 'state',\n  phone = 'phone',\n  dropdown = 'dropdown',\n  checkboxes = 'checkboxes',\n}\n\nexport enum Sections {\n  product = 'product',\n  customer = 'customer',\n}\n\nexport type FieldType = keyof typeof Types;\n\nexport type SectionType = keyof typeof Sections;\n\nexport type UniqueId = string;\n\nexport interface FormFieldOption {\n  id: UniqueId;\n  label: string;\n  value: string;\n}\n\nexport interface FormFieldBasic {\n  label: string;\n  name: string;\n  placeholder?: string;\n  default?: string;\n  value: string;\n  description: string;\n  required: boolean;\n  accept?: string;\n  id: UniqueId;\n}\n\nexport interface FormFieldMultiple extends FormFieldBasic {\n  type: Extract<FieldType, 'dropdown' | 'checkboxes'>;\n  options: FormFieldOption[];\n}\n\nexport interface FormSingleField extends FormFieldBasic {\n  type: Exclude<FieldType, 'dropdown' | 'checkboxes'>\n}\n\nexport type FormField = FormSingleField | FormFieldMultiple\n\nexport interface FieldsGroup {\n  name: SectionType;\n  fields: Array<FormField>;\n}\n\nexport interface Product {\n  id: UniqueId;\n  title: string;\n  handle: string;\n  image: {\n    src: string;\n  },\n  variantId: UniqueId;\n}\n\nexport type FormValues = Record<string, string | number | File | Product>\n\n","import React, {InputHTMLAttributes} from 'react';\nimport {Field} from 'formik'\n\nexport const Select: React.FC<InputHTMLAttributes<HTMLInputElement> & {\n  values: {\n    id: string;\n    label: string;\n    value: string;\n  }[]\n}> = ({\n        name,\n        id,\n        values\n      }) => {\n  return (\n    <Field as=\"select\" name={name} id={id}>\n      <option/>\n      {values.map(v => (\n        <option key={v.id} value={v.value} label={v.label}>{v.label}</option>\n      ))}\n    </Field>\n  )\n}\n","import React, {InputHTMLAttributes} from 'react';\nimport {Field} from 'formik'\n\nexport const Radio: React.FC<InputHTMLAttributes<HTMLInputElement> & {\n  values: {\n    id: string;\n    label: string;\n    value: string;\n  }[]\n}> = ({\n        name,\n        values,\n        id,\n      }) => {\n  return (\n    <div role=\"group\" id={id}>\n      {values.map(v => (\n        <label key={v.id}>\n            <span>\n              {v.label}\n            </span>\n          <Field type=\"radio\" id={v.id} name={name} value={v.value}/>\n        </label>\n      ))}\n    </div>\n  )\n}\n","import React, {useCallback, useState} from 'react';\nimport {FieldProps} from 'formik';\n\nexport const Serial: React.FC<FieldProps & {id: string; label: string}> = ({\n  id,\n  label,\n  field,\n  form\n}) => {\n  const [value, setValue] = useState('');\n  const [submitted, setSubmitted] = useState('');\n  const [check, setCheck] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const validate = useCallback(async (): Promise<{ valid: boolean }> => {\n    return new Promise((resolve, reject) => {\n      console.log('Fake api call...');\n\n      setTimeout(() => {\n        if (Math.random() < 0.5) {\n          resolve({ valid: true });\n        } else {\n          resolve({ valid: false });\n        }\n      }, 2000)\n    })\n  }, [])\n\n  const submitIfValid = useCallback(async () => {\n    setSubmitted(value);\n    setValue('');\n    setLoading(true);\n\n    const { valid } = await validate();\n\n    form.setFieldValue(field.name, valid ? value : '');\n    setCheck(valid);\n    setLoading(false);\n  }, [value, field.name, form, validate])\n\n  return (\n    <div>\n      {submitted && <div>\n        <b>{submitted}</b> <span>{loading ? 'Checking...' : (check ? 'OK' : 'FAILURE')}</span>\n        {' '}\n        <button onClick={() => {\n          setSubmitted('')\n          form.setFieldValue(field.name, '');\n        }}>\n            Clear\n        </button>\n      </div>}\n      <label>\n        <span>{label}</span>\n        <input\n          disabled={Boolean(submitted)}\n          type=\"text\"\n          onKeyDown={e => {\n            if (e && e.key === 'Enter') {\n              submitIfValid()\n            }\n          }}\n          onBlur={submitIfValid}\n          onChange={e => setValue(e.target.value)}\n          value={value}\n          id={id}\n        />\n      </label>\n    </div>\n  )\n}\n","import {useEffect, useState} from 'react';\nimport Select from 'react-select';\nimport {FieldProps} from 'formik';\n\nexport const States: React.FC<FieldProps & { country: string; disabled?: boolean }> = ({\n  country,\n  field,\n  form,\n  disabled\n}) => {\n  const [states, setStates] = useState<{value: string; label: string;}[]>([]);\n\n  async function fetchStates(country: string) {\n    const response = await fetch(`states.json`, {\n      cache: 'force-cache',\n    });\n    const data: Record<string, Record<string, string>> = await response.json();\n\n    if (country && country in data) {\n      setStates(\n        Object.entries(data[country] as Record<string, string>)\n        .map(([key, value]) => ({\n          value: key, label: value\n        }))\n      )\n    }\n\n    return [];\n  }\n\n  useEffect(() => {\n    fetchStates(country);\n  }, [form, field, country])\n\n  return (\n    <Select\n      options={states}\n      name={field.name}\n      value={field.value}\n      onChange={(option) => {\n        form.setFieldValue(field.name, option)\n      }}\n      isDisabled={Boolean(disabled)}\n    />\n  )\n}\n","import * as yup from 'yup';\nimport {FormField, FormValues, Types} from 'types';\n\nexport function createFormValues(fields: FormField[]): FormValues {\n  return fields.reduce((acc, next) => ({\n    ...acc,\n    [next.name]: next.default || '',\n  }), {} as FormValues)\n}\n\nexport function createFormValidation(fields: FormField[]) {\n  const fieldsValidation = fields.reduce((acc, next) => {\n    const f = yup.lazy(v => {\n      if (next.type === Types.product && next.required) {\n        return yup.object().required(`${next.label} is a required field`).nullable()\n      }\n\n      if (next.type === Types.email && next.required) {\n        return yup.string().email(`Invalid email`).required(`${next.label} is a required field`)\n      }\n\n      if (next.required) {\n        return yup.string().required(`${next.label} is a required field`)\n      }\n\n      return yup.mixed()\n    })\n\n    return {\n      ...acc,\n      [next.name]: f,\n    };\n  }, {});\n\n  return yup.object().shape(fieldsValidation)\n}\n","import React from 'react';\nimport DatePicker from 'react-datepicker'\nimport {ErrorMessage, Field, FieldProps, Form, Formik} from 'formik';\nimport {FormField, FormValues, Types} from 'types';\nimport {Select} from 'form/components/Select';\n\nimport {Radio} from 'form/components/Radio';\nimport {Serial} from 'form/components/Serial';\nimport {States} from 'form/components/States';\nimport {createFormValidation, createFormValues} from 'form/helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport AsyncSelect from 'react-select/async';\n\nconst FormContent: React.FC<{\n  fields: FormField[],\n  handleSubmit: (p: FormValues) => void,\n}> = ({\n        fields,\n        handleSubmit,\n        children\n      }) => {\n  const fieldMeta = (f: FormField) => {\n    return (\n      <>\n        {f.description && <div>{f.description}</div>}\n        <ErrorMessage name={f.name}/>\n      </>\n    )\n  }\n\n  return (\n    <Formik\n      initialValues={createFormValues(fields)}\n      validationSchema={createFormValidation(fields)}\n      onSubmit={(values: FormValues) => {\n        handleSubmit(values)\n      }}\n    >\n      {formik => (\n        <Form style={{marginBottom: 30, marginTop: 30}} onSubmit={formik.handleSubmit}>\n          <>\n            {fields.map(f => {\n              const key = [f.id, f.name, f.label].join('');\n\n              switch (f.type) {\n                case Types.textInput:\n                case Types.phone:\n                case Types.email: {\n                  return (\n                    <div key={key}>\n                      <div>\n                        <label>\n                          <span>{f.label}</span>\n                          <Field name={f.name}/>\n                        </label>\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.serialNumber: {\n                  return (\n                    <div key={key}>\n                      <Field component={Serial} {...f} />\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.file: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        {f.label}\n                      </label>\n                      <div>\n                        <input\n                          accept={f.accept}\n                          type={f.type}\n                          name={f.name}\n                          onChange={(event) => {\n                            formik.setFieldValue(f.name, event?.target?.files?.[0]);\n                          }}\n                        />\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.checkboxes: {\n                  const {options: values, ...restProps} = f;\n\n                  return (\n                    <div key={key}>\n                      <div>\n                        <div>{f.label}</div>\n                        <Radio\n                          {...restProps}\n                          values={values}/>\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.dropdown: {\n                  const {options: values, ...restProps} = f;\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>{f.label}</span>\n                        <Select\n                          {...restProps}\n                          values={values}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.date: {\n                  const value = formik.values[f.name];\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>{f.label}</span>\n                        <DatePicker\n                          selected={value ? new Date(value as string) : null}\n                          dateFormat=\"MMMM d, yyyy\"\n                          className=\"form-control\"\n                          name=\"startDate\"\n                          onChange={date => {\n                            if (date) {\n                              formik.setFieldValue(f.name, date.toString())\n                            }\n                          }}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.product: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>{f.label}</span>\n                        <Field\n                          {...f}\n                          render={({field, form}: FieldProps) => {\n                            return (\n                              <AsyncSelect\n                                cacheOptions\n                                formatOptionLabel={(props: Record<string, any>) => {\n                                  return (\n                                    <div style={{display: 'flex', alignItems: 'center'}}>\n                                      <img width={32} src={props?.image?.src} alt=\"\"/>\n                                      <span>\n                                        {props?.title}\n                                      </span>\n                                    </div>\n                                  )\n                                }}\n                                isClearable\n                                defaultOptions\n                                name={field.name}\n                                value={field.value || ''}\n                                isOptionSelected={(option, selectValue) => {\n                                  return selectValue.some(v => v.variantId === option.variantId)\n                                }}\n                                onChange={(option) => form.setFieldValue(field.name, option)}\n                                loadOptions={async (inputValue: string) => {\n                                  const response = await fetch(`search.json?q=${inputValue}`);\n\n                                  return await response.json();\n                                }}\n                              />\n                            )\n                          }}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.country: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>\n                          {f.label}\n                        </span>\n                        <Field\n                          {...f}\n                          render={({form, field}: FieldProps) => {\n                            return (\n                              <AsyncSelect\n                                cacheOptions\n                                defaultOptions\n                                name={field.name}\n                                defaultValue={field.value}\n                                onChange={(option) => {\n                                  form.setFieldValue('state', '');\n                                  form.setFieldValue(field.name, (option as any).value);\n                                }}\n                                loadOptions={async (inputValue: string) => {\n                                  const response = await fetch(`countries.json`, {\n                                    cache: 'force-cache',\n                                  });\n                                  const data: Record<string, string> = await response.json();\n\n                                  return Object.entries(data)\n                                    .filter(([key, value]) => value.toLowerCase().includes(inputValue.toLowerCase()))\n                                    .map(([key, value]) => ({\n                                      value: key, label: value\n                                    }))\n                                }}\n                              />\n                            )\n                          }}\n                          />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n\n                case Types.state: {\n                  const country = (formik.values?.country ?? '') as string;\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>\n                          {f.label}\n                        </span>\n                        <Field\n                          {...f}\n                          country={country}\n                          render={(props: FieldProps) => {\n                            return <States country={country} {...props} />\n                          }}\n                          disabled={!Boolean(country)}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                default:\n                  return <div key={key}>Not implemented field {f.type}</div>\n              }\n            })}\n          </>\n          {children}\n        </Form>\n      )}\n    </Formik>\n  )\n\n}\n\nexport default FormContent;\n","import React, {useState} from 'react';\nimport {useForm} from 'form/hooks/useForm';\nimport {FormValues, Sections} from './types';\nimport FormContent from 'form/components';\n\nconst App: React.FC = () => {\n  const {formData, loading, error} = useForm();\n  const [fulfilledOrder, setFulfilledOrder] = useState<FormValues[] | null>();\n  const [visibleEdit, setVisibleEdit] = useState(false);\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div>Error...</div>\n    )\n  }\n\n  return formData ? (\n    <>\n      {fulfilledOrder && Array.isArray(fulfilledOrder) && (\n        <>\n          <table style={{border: 'solid', borderCollapse: 'collapse', marginBottom: 20}} width=\"100%\">\n            <thead>\n            <tr>\n              {formData.find(d => d.name === Sections.product)?.fields!.map(f => (\n                <th key={f.id} style={{border: 'solid'}}>{f.label}</th>))}\n            </tr>\n            </thead>\n            <tbody>\n            {fulfilledOrder.map((order, index) => {\n              return (\n                <tr key={index}>\n                  {Object.values(order).map((v, i) => (\n                    <td style={{border: 'solid'}} key={i}>{typeof v === 'object' ? ('name' in v ? v.name : (\n                      <div style={{ textAlign: 'center' }}>\n                        <img width={32} src={v.image.src} alt=\"\"/>\n                        <div>\n                          {v.title}\n                        </div>\n                      </div>\n                    )) : v}</td>))}\n                </tr>\n              )\n            })}\n            </tbody>\n          </table>\n\n          <button onClick={() => {\n            setVisibleEdit(false)\n          }}>ADD NEW PRODUCT\n          </button>\n\n          <button onClick={() => {\n            setVisibleEdit(true)\n          }}>CANCEL\n          </button>\n        </>\n      )}\n\n\n      {!visibleEdit && <FormContent\n          fields={formData.find(d => d.name === Sections.product)?.fields!}\n          handleSubmit={productPayload => {\n            setFulfilledOrder(prevState => (prevState && Array.isArray(prevState))\n              ? [...prevState, productPayload]\n              : [productPayload]\n            )\n            setVisibleEdit(true)\n          }}\n      >\n          <button type=\"submit\">\n              Register\n          </button>\n      </FormContent>}\n\n      {visibleEdit && fulfilledOrder && Array.isArray(fulfilledOrder) && (\n        <FormContent\n            fields={formData.find(d => d.name === Sections.customer)?.fields!}\n            handleSubmit={values => {\n              console.log(fulfilledOrder, values)\n            }}\n        >\n            <button type=\"submit\">\n                Register\n            </button>\n        </FormContent>\n      )}\n    </>\n  ) : null;\n}\n\nexport default App;\n","import {useCallback, useEffect, useState} from 'react';\nimport {FieldsGroup} from 'types';\n\nexport function useForm() {\n  const [formData, setFormData] = useState<FieldsGroup[] | null>();\n  const [error, setError] = useState<Error | null>()\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const fetchFormData = useCallback(async () => {\n    setLoading(true)\n\n    try {\n      const response = await fetch('form.json');\n\n      const data = await response.json();\n\n      setFormData(data);\n      setError(null);\n    } catch (e) {\n      setFormData(null);\n      setError(e as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [])\n\n  useEffect(() => {\n    fetchFormData()\n  }, [fetchFormData])\n\n  return {\n    formData,\n    error,\n    loading,\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}