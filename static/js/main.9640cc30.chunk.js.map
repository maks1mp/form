{"version":3,"sources":["types.ts","form/components/Select.tsx","form/components/Radio.tsx","form/components/Search.tsx","form/components/Serial.tsx","form/helpers/index.ts","form/components/States.tsx","form/components/index.tsx","App.tsx","form/hooks/useForm.ts","reportWebVitals.ts","index.tsx"],"names":["Types","Sections","Select","name","id","values","as","map","v","value","label","Radio","role","type","Search","form","field","promiseOptions","disabled","cacheOptions","defaultOptions","defaultValue","onChange","option","setFieldValue","isDisabled","Boolean","loadOptions","Serial","useState","setValue","submitted","setSubmitted","check","setCheck","loading","setLoading","validate","useCallback","a","Promise","resolve","reject","console","log","setTimeout","Math","random","valid","submitIfValid","onClick","onBlur","e","target","createFormValues","fields","reduce","acc","next","default","createFormValidation","fieldsValidation","f","yup","required","shape","States","country","states","setStates","fetch","cache","response","json","data","Object","entries","useEffect","fetchStates","options","FormContent","handleSubmit","children","fieldMeta","description","initialValues","validationSchema","onSubmit","formik","style","marginBottom","marginTop","key","join","textInput","phone","email","serialNumber","component","file","accept","event","files","checkboxes","restProps","dropdown","date","selected","Date","dateFormat","className","toString","product","inputValue","d","title","filter","toLowerCase","includes","state","render","props","App","formData","setFormData","error","setError","fetchFormData","useForm","fulfilledOrder","setFulfilledOrder","visibleEdit","setVisibleEdit","Array","isArray","border","borderCollapse","width","find","order","index","i","productPayload","prevState","customer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9640cc30.chunk.js","sourcesContent":["export enum Types {\n  product = 'product',\n  serialNumber = 'serialNumber',\n  date = 'date',\n  file = 'file',\n  textInput = 'textInput',\n  email = 'email',\n  country = 'country',\n  state = 'state',\n  phone = 'phone',\n  dropdown = 'dropdown',\n  checkboxes = 'checkboxes',\n}\n\nexport enum Sections {\n  product = 'product',\n  customer = 'customer',\n}\n\nexport type FieldType = keyof typeof Types;\n\nexport type SectionType = keyof typeof Sections;\n\nexport type UniqueId = string;\n\nexport interface FormFieldOption {\n  id: UniqueId;\n  label: string;\n  value: string;\n}\n\nexport interface FormFieldBasic {\n  label: string;\n  name: string;\n  placeholder?: string;\n  default?: string;\n  value: string;\n  description: string;\n  required: boolean;\n  accept?: string;\n  id: UniqueId;\n}\n\nexport interface FormFieldMultiple extends FormFieldBasic {\n  type: Extract<FieldType, 'dropdown' | 'checkboxes'>;\n  options: FormFieldOption[];\n}\n\nexport interface FormSingleField extends FormFieldBasic {\n  type: Exclude<FieldType, 'dropdown' | 'checkboxes'>\n}\n\nexport type FormField = FormSingleField | FormFieldMultiple\n\nexport interface FieldsGroup {\n  name: SectionType;\n  fields: Array<FormField>;\n}\n\nexport type FormValues = Record<string, string | number | File>\n\n","import React, {InputHTMLAttributes} from 'react';\nimport {Field} from 'formik'\n\nexport const Select: React.FC<InputHTMLAttributes<HTMLInputElement> & {\n  values: {\n    id: string;\n    label: string;\n    value: string;\n  }[]\n}> = ({\n        name,\n        id,\n        values\n      }) => {\n  return (\n    <div>\n      <div>Picked</div>\n      <Field as=\"select\" name={name} id={id}>\n        <option />\n        {values.map(v => (\n          <option key={v.id} value={v.value} label={v.label}>{v.label}</option>\n        ))}\n      </Field>\n    </div>\n  )\n}\n","import React, {InputHTMLAttributes} from 'react';\nimport {Field} from 'formik'\n\nexport const Radio: React.FC<InputHTMLAttributes<HTMLInputElement> & {\n  values: {\n    id: string;\n    label: string;\n    value: string;\n  }[]\n}> = ({\n  name,\n  values,\n  id,\n      }) => {\n  return (\n    <div id={id}>\n      <div>Picked</div>\n      <div role=\"group\">\n        {values.map(v => (\n          <label key={v.id}>\n            <span>\n              {v.label}\n            </span>\n            <Field type=\"radio\" id={v.id} name={name} value={v.value} />\n          </label>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport {FieldProps} from 'formik';\nimport AsyncSelect from 'react-select/async';\n\nexport const Search: React.FC<FieldProps & {\n  promiseOptions: (input: string) => Promise<any>,\n  disabled?: boolean,\n}> = ({\n  form,\n  field,\n  promiseOptions,\n  disabled,\n}) => {\n  return (\n    <AsyncSelect\n      cacheOptions\n      defaultOptions\n      name={field.name}\n      defaultValue={field.value}\n      onChange={(option) => form.setFieldValue(field.name, (option as any).value)}\n      isDisabled={Boolean(disabled)}\n      loadOptions={promiseOptions}\n    />\n  )\n}\n","import React, {useCallback, useState} from 'react';\nimport {FieldProps} from 'formik';\n\nexport const Serial: React.FC<FieldProps & {id: string; label: string}> = ({\n  id,\n  label,\n  field,\n  form\n}) => {\n  const [value, setValue] = useState('');\n  const [submitted, setSubmitted] = useState('');\n  const [check, setCheck] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const validate = useCallback(async (): Promise<{ valid: boolean }> => {\n    return new Promise((resolve, reject) => {\n      console.log('Fake api call...');\n\n      setTimeout(() => {\n        if (Math.random() < 0.5) {\n          resolve({ valid: true });\n        } else {\n          resolve({ valid: false });\n        }\n      }, 2000)\n    })\n  }, [])\n\n  const submitIfValid = useCallback(async () => {\n    setSubmitted(value);\n    setValue('');\n    setLoading(true);\n\n    const { valid } = await validate();\n\n    form.setFieldValue(field.name, valid ? value : '');\n    setCheck(valid);\n    setLoading(false);\n  }, [value, field.name, form, validate])\n\n  return (\n    <div>\n      {submitted && <div>\n        <b>{submitted}</b> <span>{loading ? 'Checking...' : (check ? 'OK' : 'FAILURE')}</span>\n        {' '}\n        <button onClick={() => {\n          setSubmitted('')\n          form.setFieldValue(field.name, '');\n        }}>\n            Clear\n        </button>\n      </div>}\n      <label>\n        <span>{label}</span>\n        <input\n          disabled={Boolean(submitted)}\n          type=\"text\"\n          onBlur={submitIfValid}\n          onChange={e => setValue(e.target.value)}\n          value={value}\n          id={id}\n        />\n      </label>\n    </div>\n  )\n}\n","import * as yup from 'yup';\nimport {FormField, FormValues} from '../../types';\n\nexport function createFormValues(fields: FormField[]): FormValues {\n  return fields.reduce((acc, next) => ({\n    ...acc,\n    [next.name]: next.default || '',\n  }), {} as FormValues)\n}\n\nexport function createFormValidation(fields: FormField[]) {\n  const fieldsValidation = fields.reduce((acc, next) => {\n    const f = yup.lazy(v => {\n      if (next.required) {\n        return yup.string().required(`${next.label} is a required field`)\n      }\n\n      return yup.mixed()\n    })\n\n    return {\n      ...acc,\n      [next.name]: f,\n    };\n  }, {});\n\n  return yup.object().shape(fieldsValidation)\n}\n","import {useEffect, useState} from 'react';\nimport Select from 'react-select';\nimport {FieldProps} from 'formik';\n\nexport const States: React.FC<FieldProps & { country: string; disabled?: boolean }> = ({\n  country,\n  field,\n  form,\n  disabled\n}) => {\n  const [states, setStates] = useState<{value: string; label: string;}[]>([]);\n\n  async function fetchStates(country: string) {\n    const response = await fetch(`states.json`, {\n      cache: 'force-cache',\n    });\n    const data: Record<string, Record<string, string>> = await response.json();\n\n    if (country && country in data) {\n      setStates(\n        Object.entries(data[country] as Record<string, string>)\n        .map(([key, value]) => ({\n          value: key, label: value\n        }))\n      )\n    }\n\n    return [];\n  }\n\n  useEffect(() => {\n    fetchStates(country)\n  }, [country])\n\n  return (\n    <Select\n      options={states}\n      name={field.name}\n      defaultValue={field.value}\n      onChange={(option) => form.setFieldValue(field.name, (option as any).value)}\n      isDisabled={Boolean(disabled)}\n    />\n  )\n}\n","import React, {useState} from 'react';\nimport DatePicker from 'react-datepicker'\nimport {ErrorMessage, Field, FieldProps, Form, Formik} from 'formik';\nimport {FormField, FormValues, Types} from '../../types';\nimport {Select} from './Select';\n\nimport {Radio} from './Radio';\nimport {Search} from './Search';\nimport {Serial} from './Serial';\nimport {createFormValidation, createFormValues} from '../helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport {States} from './States';\n\nconst FormContent: React.FC<{\n  fields: FormField[],\n  handleSubmit: (p: FormValues) => void,\n}> = ({\n        fields,\n        handleSubmit,\n        children\n      }) => {\n  const fieldMeta = (f: FormField) => {\n    return (\n      <>\n        {f.description && <div>{f.description}</div>}\n        <ErrorMessage name={f.name}/>\n      </>\n    )\n  }\n\n  return (\n    <Formik\n      initialValues={createFormValues(fields)}\n      validationSchema={createFormValidation(fields)}\n      onSubmit={(values: FormValues) => {\n        handleSubmit(values)\n      }}\n    >\n      {formik => (\n        <Form style={{ marginBottom: 30, marginTop: 30 }} onSubmit={formik.handleSubmit}>\n          <>\n            {fields.map(f => {\n              const key = [f.id, f.name, f.label].join('');\n\n              switch (f.type) {\n                case Types.textInput:\n                case Types.phone:\n                case Types.email: {\n                  return (\n                    <div key={key}>\n                      <span>{f.label}</span>\n                      <Field name={f.name}/>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.serialNumber: {\n                  return (\n                    <div key={key}>\n                      <Field component={Serial} {...f} />\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.file: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        {f.label}\n                      </label>\n                      <div>\n                        <input\n                          accept={f.accept}\n                          type={f.type}\n                          name={f.name}\n                          onChange={(event) => {\n                            formik.setFieldValue(f.name, event?.target?.files?.[0]);\n                          }}\n                        />\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.checkboxes: {\n                  const {options: values, ...restProps} = f;\n\n                  return (\n                    <div key={key}>\n                      <Radio\n                        {...restProps}\n                        values={values}/>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.dropdown: {\n                  const {options: values, ...restProps} = f;\n\n                  return (\n                    <div key={key}>\n                      <Select\n                        {...restProps}\n                        values={values}\n                      />\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.date: {\n                  const value = formik.values[f.name];\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>{f.label}</span>\n                        <DatePicker\n                          selected={value ? new Date(value as string) : null}\n                          dateFormat=\"MMMM d, yyyy\"\n                          className=\"form-control\"\n                          name=\"startDate\"\n                          onChange={date => {\n                            if (date) {\n                              formik.setFieldValue(f.name, date.toString())\n                            }\n                          }}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.product: {\n                  return (\n                    <div key={key}>\n                      <Field\n                        {...f}\n                        component={Search}\n                        promiseOptions={async (inputValue: string) => {\n                          const response = await fetch(`search.json?q=${inputValue}`);\n                          const data = await response.json();\n\n                          return data.map((d: FormValues) => ({\n                            value: d.id, label: d.title\n                          }))\n                        }}/>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.country: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>\n                          {f.label}\n                        </span>\n                        <Field\n                          {...f}\n                          component={Search}\n                          promiseOptions={async (inputValue: string) => {\n                            const response = await fetch(`countries.json`, {\n                              cache: 'force-cache',\n                            });\n                            const data: Record<string, string> = await response.json();\n\n                            return Object.entries(data)\n                              .filter(([key, value]) => value.toLowerCase().includes(inputValue.toLowerCase()))\n                              .map(([key, value]) => ({\n                                value: key, label: value\n                              }))\n                          }}/>\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n\n                case Types.state: {\n                  const country = (formik.values?.country ?? '') as string;\n\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>\n                          {f.label}\n                        </span>\n                        <Field\n                          {...f}\n                          country={country}\n                          render={(props: FieldProps) => {\n                            return <States country={country} {...props} />\n                          }}\n                          disabled={!Boolean(country)}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                default:\n                  return <div key={key}>Not implemented field {f.type}</div>\n              }\n            })}\n          </>\n          {children}\n        </Form>\n      )}\n    </Formik>\n  )\n\n}\n\nexport default FormContent;\n","import React, {useState} from 'react';\nimport {useForm} from './form/hooks/useForm';\nimport {FormValues, Sections} from './types';\nimport FormContent from './form/components';\n\nconst App: React.FC = () => {\n  const {formData, loading, error} = useForm();\n  const [fulfilledOrder, setFulfilledOrder] = useState<FormValues[] | null>();\n  const [visibleEdit, setVisibleEdit] = useState(false);\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div>Error...</div>\n    )\n  }\n\n  return formData ? (\n    <>\n      {fulfilledOrder && Array.isArray(fulfilledOrder) && (\n        <table style={{ border: \"solid\", borderCollapse: \"collapse\", marginBottom: 20 }} width=\"100%\">\n          <thead>\n          <tr>\n            {formData.find(d => d.name === Sections.product)?.fields!.map(f => (<th key={f.id} style={{ border: \"solid\"}}>{f.label}</th>))}\n          </tr>\n          </thead>\n          <tbody>\n            {fulfilledOrder.map((order, index) => {\n              return (\n                <tr key={index}>\n                  {Object.values(order).map((v, i) => (<td style={{ border: \"solid\"}} key={i}>{typeof v === 'object' ? v.name : v}</td>))}\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      )}\n\n      <button onClick={() => {\n        setVisibleEdit(false)\n      }}>ADD NEW PRODUCT</button>\n\n      {!visibleEdit && <FormContent\n        fields={formData.find(d => d.name === Sections.product)?.fields!}\n        handleSubmit={productPayload => {\n          setFulfilledOrder(prevState => (prevState && Array.isArray(prevState))\n            ? [...prevState, productPayload]\n            : [productPayload]\n          )\n          setVisibleEdit(true)\n        }}\n      >\n        <button type=\"submit\">\n          Register\n        </button>\n      </FormContent>}\n\n      {fulfilledOrder && Array.isArray(fulfilledOrder) &&\n      <FormContent\n          fields={formData.find(d => d.name === Sections.customer)?.fields!}\n          handleSubmit={values => {\n            console.log(fulfilledOrder, values)\n          }}\n      >\n          <button type=\"submit\">\n              Register\n          </button>\n      </FormContent>}\n    </>\n  ) : null;\n}\n\nexport default App;\n","import {useCallback, useEffect, useState} from 'react';\nimport {FieldsGroup} from '../../types';\n\nexport function useForm() {\n  const [formData, setFormData] = useState<FieldsGroup[] | null>();\n  const [error, setError] = useState<Error | null>()\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const fetchFormData = useCallback(async () => {\n    setLoading(true)\n\n    try {\n      const response = await fetch('form.json');\n\n      const data = await response.json();\n\n      setFormData(data);\n      setError(null);\n    } catch (e) {\n      setFormData(null);\n      setError(e as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [])\n\n  useEffect(() => {\n    fetchFormData()\n  }, [fetchFormData])\n\n  return {\n    formData,\n    error,\n    loading,\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}