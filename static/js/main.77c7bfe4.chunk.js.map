{"version":3,"sources":["types.ts","form/components/Select.tsx","form/components/Radio.tsx","form/components/Serial.tsx","form/components/States.tsx","form/components/Country.tsx","form/helpers/index.ts","form/components/index.tsx","modules/FlowMultiple.tsx","modules/FlowSingle.tsx","App.tsx","form/hooks/useForm.ts","reportWebVitals.ts","index.tsx"],"names":["Types","Sections","Select","name","id","values","disabled","as","map","v","value","label","Radio","role","type","Serial","field","form","useState","setValue","submitted","setSubmitted","validate","useCallback","a","Promise","resolve","reject","console","log","setTimeout","Math","random","valid","validating","submitIfValid","some","newItem","result","i","useEffect","validInstance","filter","setFieldValue","length","s","onClick","onKeyDown","e","key","onBlur","onChange","target","cachedStates","States","country","states","setStates","fetch","cache","response","json","data","Object","entries","fetchStates","options","option","isDisabled","Boolean","memo","cachedCountries","Country","cacheOptions","defaultOptions","defaultValue","loadOptions","inputValue","toLowerCase","includes","createFormValues","fields","reduce","acc","next","default","createFormValidation","fieldsValidation","f","yup","serialNumber","required","of","min","ensure","product","nullable","email","shape","FormContent","handleSubmit","children","fieldMeta","description","initialValues","validationSchema","onSubmit","formik","style","marginBottom","marginTop","join","textInput","phone","isSubmitting","render","props","file","accept","event","files","checkboxes","restProps","dropdown","date","htmlFor","selected","Date","dateFormat","className","toString","formatOptionLabel","display","alignItems","width","src","image","alt","title","isClearable","isOptionSelected","selectValue","variantId","state","FlowMultiple","formData","fulfilledOrder","setFulfilledOrder","visibleEdit","setVisibleEdit","Array","isArray","border","borderCollapse","find","d","order","index","textAlign","productPayload","prevState","customer","FlowSingle","all","products","payload","sendEmails","items","p","productName","serialNumbers","purchaseDate","toISOString","forEach","method","headers","Headers","body","JSON","stringify","then","res","App","setFormData","error","setError","loading","setLoading","searchParams","URLSearchParams","document","location","search","substring","formFile","get","fetchFormData","useForm","modal","setModal","redirect","setRedirect","postError","setPostError","submitting","setSubmitting","window","href","overflow","submit","success","content","color","isOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Modal","setAppElement","ReactDOM","StrictMode","getElementById"],"mappings":"+HAAYA,EAcAC,E,4FAdAD,K,kBAAAA,E,4BAAAA,E,YAAAA,E,YAAAA,E,sBAAAA,E,cAAAA,E,kBAAAA,E,cAAAA,E,cAAAA,E,oBAAAA,E,yBAAAA,M,cAcAC,K,kBAAAA,E,oBAAAA,E,WAAAA,M,iECXCC,EAMR,SAAC,GAKO,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,GACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEN,OACE,eAAC,IAAD,CAAOC,GAAG,SAASJ,KAAMA,EAAMC,GAAIA,EAAIE,SAAUA,EAAjD,UACE,2BACCD,EAAOG,KAAI,SAAAC,GAAC,OACX,wBAAmBC,MAAOD,EAAEC,MAAOC,MAAOF,EAAEE,MAA5C,SAAoDF,EAAEE,OAAzCF,EAAEL,WChBVQ,EAMR,SAAC,GAKO,IAJLT,EAII,EAJJA,KACAE,EAGI,EAHJA,OACAD,EAEI,EAFJA,GACAE,EACI,EADJA,SAEN,OACE,qBAAKO,KAAK,QAAQT,GAAIA,EAAtB,SACGC,EAAOG,KAAI,SAAAC,GAAC,OACX,kCACI,+BACGA,EAAEE,QAEP,cAAC,IAAD,CAAOG,KAAK,QAAQV,GAAIK,EAAEL,GAAID,KAAMA,EAAMO,MAAOD,EAAEC,MAAOJ,SAAUA,MAJ1DG,EAAEL,UCTTW,EAAiF,SAAC,GAMxF,IALLX,EAKI,EALJA,GACAO,EAII,EAJJA,MACAK,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAX,EACI,EADJA,SACI,EACsBY,mBAAS,IAD/B,mBACGR,EADH,KACUS,EADV,OAE8BD,mBAA2B,IAFzD,mBAEGE,EAFH,KAEcC,EAFd,KAIEC,EAAWC,sBAAW,uCAAC,WAAOb,GAAP,SAAAc,EAAA,+EACpB,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,QAAQC,IAAI,oBAEZC,YAAW,WACLC,KAAKC,SAAW,GAClBN,EAAQ,2BAAKhB,GAAN,IAAauB,OAAO,EAAMC,YAAY,KAE7CR,EAAQ,2BAAKhB,GAAN,IAAauB,OAAO,EAAOC,YAAY,OAE/C,SAVsB,2CAAD,sDAYzB,IAEGC,EAAgBZ,sBAAW,sBAAC,8BAAAC,EAAA,yDAC3Bd,IAASU,EAAUgB,MAAK,SAAA3B,GAAC,OAAIA,EAAEC,QAAUA,KADd,wDAK1B2B,EAAU,CACd3B,QACAuB,OAAO,EACPC,YAAY,GAEdb,GAAa,SAAAZ,GAAC,4BAAQA,GAAR,CAAW4B,OACzBlB,EAAS,IAXuB,SAaXG,EAASe,GAbE,OAa1BC,EAb0B,OAehCjB,GAAa,SAAAZ,GAAC,OAAIA,EAAED,KAAI,SAAA+B,GACtB,OAAIA,EAAE7B,QAAU4B,EAAO5B,MACd4B,EAGFC,QApBuB,2CAsB/B,CAAC7B,EAAOU,EAAWE,IAStB,OAPAkB,qBAAU,WACR,IAAMC,EAAgBrB,EAAUsB,QAAO,SAAAjC,GAAC,OAAIA,EAAEwB,QAAUxB,EAAEyB,cAE1DjB,EAAK0B,cAAc3B,EAAMb,KAAMsC,EAAcG,OAAS,EAAIH,EAAcjC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,MAE3F,CAACM,EAAMb,KAAMiB,IAGd,gCACGA,EAAUwB,OAAS,GAAK,6BACtBxB,EAAUZ,KAAI,SAAAqC,GAAC,OACd,+BACGA,EAAEnC,MACF,IACAmC,EAAEX,WAAa,cAAiBW,EAAEZ,MAAQ,KAAO,UACjD,IACD,wBAAQa,QAAS,WACfzB,GAAa,SAAAZ,GAAC,OAAIA,EAAEiC,QAAO,SAAAjC,GAAC,OAAIA,EAAEC,QAAUmC,EAAEnC,aADhD,sBALOmC,EAAEnC,YAaf,kCACE,+BAAOC,IACP,uBACEL,SAAUA,GAAYc,EAAUgB,MAAK,SAAAS,GAAC,OAAIA,EAAEX,cAC5CpB,KAAK,OACLiC,UAAW,SAAAC,GACLA,GAAe,UAAVA,EAAEC,KACTd,KAGJe,OAAQf,EACRgB,SAAU,SAAAH,GAAC,OAAI7B,EAAS6B,EAAEI,OAAO1C,QACjCA,MAAOA,EACPN,GAAIA,W,SC1FViD,EAA6D,KAE3DC,EAAyE,SAAC,GAKzE,IAJLC,EAII,EAJJA,QACAvC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAX,EACI,EADJA,SACI,EACwBY,mBAA4C,IADpE,mBACGsC,EADH,KACWC,EADX,iDAGJ,WAA2BF,GAA3B,iBAAA/B,EAAA,yDAGO6B,EAHP,wBAIIA,EAAe,GAJnB,SAM2BK,MAAM,cAAe,CAC1CC,MAAO,gBAPb,cAMUC,EANV,gBASiBA,EAASC,OAT1B,OASIC,EATJ,OAWIT,EAAeS,EAXnB,wBAaIA,EAAOT,EAbX,eAgBME,GAAWA,KAAWO,GACxBL,EACEM,OAAOC,QAAQF,EAAKP,IACnB/C,KAAI,yCAAmB,CACtBE,MADG,KACSC,MADT,UAnBX,kBAyBS,IAzBT,6CAHI,sBAmCJ,OAJA6B,qBAAU,YA/BN,oCAgCFyB,CAAYV,KACX,CAACtC,EAAMD,EAAOuC,IAGf,cAAC,IAAD,CACEW,QAASV,EACTrD,KAAMa,EAAMb,KACZO,MAAOM,EAAMN,MACbyC,SAAU,SAACgB,GACTlD,EAAK0B,cAAc3B,EAAMb,KAAMgE,IAEjCC,WAAYC,QAAQ/D,MAKXgE,iBAAKhB,G,QCvDhBiB,EAAgD,KAE9CC,EAAqD,SAAC,GAIrD,IAHLxD,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAX,EACI,EADJA,SAEA,OACE,cAAC,IAAD,CACEmE,cAAY,EACZC,gBAAc,EACdvE,KAAMa,EAAMb,KACZwE,aAAc3D,EAAMN,MACpB0D,WAAY9D,EACZ6C,SAAU,SAACgB,GACTlD,EAAK0B,cAAc,QAAS,IAC5B1B,EAAK0B,cAAc3B,EAAMb,KAAOgE,EAAezD,QAEjDkE,YAAW,uCAAE,WAAOC,GAAP,iBAAArD,EAAA,yDAGN+C,EAHM,iCAIcb,MAAM,iBAAkB,CAC7CC,MAAO,gBALA,cAIHC,EAJG,gBAQeA,EAASC,OARxB,OAQTU,EARS,OASTT,EAAOS,EATE,wBAWTT,EAAOS,EAXE,iCAcJR,OAAOC,QAAQF,GACnBpB,QAAO,oDAAwBoC,cAAcC,SAASF,EAAWC,kBACjEtE,KAAI,yCAAmB,CACtBE,MADG,KACSC,MADT,UAhBI,4CAAF,yDAwBF2D,iBAAKE,G,gBC3Cb,SAASQ,EAAiBC,GAC/B,OAAOA,EAAOC,QAAO,SAACC,EAAKC,GAAN,mBAAC,eACjBD,GADgB,kBAElBC,EAAKjF,KAAOiF,EAAKC,SAAW,OAC3B,IAGC,SAASC,EAAqBL,GACnC,IAAMM,EAAmBN,EAAOC,QAAO,SAACC,EAAKC,GAC3C,IAAMI,EAAIC,KAAS,SAAAhF,GACjB,OAAI2E,EAAKtE,OAASd,EAAM0F,cAAgBN,EAAKO,SACpCF,MAAYG,GAAGH,OAAcE,SAA7B,UAAyCP,EAAKzE,MAA9C,yBAA2EkF,IAAI,GAAGC,SAGvFV,EAAKtE,OAASd,EAAM+F,SAAWX,EAAKO,SAC/BF,MAAaE,SAAb,UAAyBP,EAAKzE,MAA9B,yBAA2DqF,WAGhEZ,EAAKtE,OAASd,EAAMiG,OAASb,EAAKO,SAC7BF,MAAaQ,MAAb,iBAAoCN,SAApC,UAAgDP,EAAKzE,MAArD,yBAGLyE,EAAKO,SACAF,MAAaE,SAAb,UAAyBP,EAAKzE,MAA9B,yBAGF8E,SAGT,OAAO,2BACFN,GADL,kBAEGC,EAAKjF,KAAOqF,MAEd,IAEH,OAAOC,MAAaS,MAAMX,G,WC8NbY,EAlPV,SAAC,GAIC,IAHLlB,EAGI,EAHJA,OACAmB,EAEI,EAFJA,aACAC,EACI,EADJA,SAEMC,EAAY,SAACd,GACjB,OACE,qCACGA,EAAEe,aAAe,8BAAMf,EAAEe,cAC1B,cAAC,IAAD,CAAcpG,KAAMqF,EAAErF,WAK5B,OACE,cAAC,IAAD,CACEqG,cAAexB,EAAiBC,GAChCwB,iBAAkBnB,EAAqBL,GACvCyB,SAAU,SAACrG,GACT+F,EAAa/F,IAJjB,SAOG,SAAAsG,GAAM,OACL,eAAC,IAAD,CAAMC,MAAO,CAACC,aAAc,GAAIC,UAAW,IAAKJ,SAAUC,EAAOP,aAAjE,UACE,mCACGnB,EAAOzE,KAAI,SAAAgF,GACV,IAAMvC,EAAM,CAACuC,EAAEpF,GAAIoF,EAAErF,KAAMqF,EAAE7E,OAAOoG,KAAK,IAEzC,OAAQvB,EAAE1E,MACR,KAAKd,EAAMgH,UACX,KAAKhH,EAAMiH,MACX,KAAKjH,EAAMiG,MACT,OACE,gCACE,8BACE,kCACE,+BAAOT,EAAE7E,QACT,cAAC,IAAD,CAAOR,KAAMqF,EAAErF,KAAMG,SAAUqG,EAAOO,oBAGzCZ,EAAUd,KAPHvC,GAWd,KAAKjD,EAAM0F,aACT,OACE,gCACE,cAAC,IAAD,aACEyB,OAAQ,SAACC,GAAD,OACN,cAAC,EAAD,uCACMA,GACA5B,GAFN,IAGElF,SAAUqG,EAAOO,kBAGjB1B,IAELc,EAAUd,KAXHvC,GAed,KAAKjD,EAAMqH,KACT,OACE,gCACE,gCACG7B,EAAE7E,QAEL,8BACE,uBACEL,SAAUqG,EAAOO,aACjBI,OAAQ9B,EAAE8B,OACVxG,KAAM0E,EAAE1E,KACRX,KAAMqF,EAAErF,KACRgD,SAAU,SAACoE,GAAW,IAAD,IACnBZ,EAAOhE,cAAc6C,EAAErF,KAAvB,OAA6BoH,QAA7B,IAA6BA,GAA7B,UAA6BA,EAAOnE,cAApC,iBAA6B,EAAeoE,aAA5C,aAA6B,EAAuB,SAIzDlB,EAAUd,KAfHvC,GAmBd,KAAKjD,EAAMyH,WAAa,IACNpH,EAAwBmF,EAAjCtB,QAAoBwD,EADN,YACmBlC,EADnB,aAGrB,OACE,gCACE,gCACE,8BAAMA,EAAE7E,QACR,cAAC,EAAD,yBACEL,SAAUqG,EAAOO,cACbQ,GAFN,IAGErH,OAAQA,QAEXiG,EAAUd,KARHvC,GAYd,KAAKjD,EAAM2H,SAAW,IACJtH,EAAwBmF,EAAjCtB,QAAoBwD,EADR,YACqBlC,EADrB,aAGnB,OACE,gCACE,kCACE,+BAAOA,EAAE7E,QACT,cAAC,EAAD,2BACM+G,GADN,IAEErH,OAAQA,EACRC,SAAUqG,EAAOO,mBAGpBZ,EAAUd,KATHvC,GAad,KAAKjD,EAAM4H,KACT,IAAMlH,EAAQiG,EAAOtG,OAAOmF,EAAErF,MAE9B,OACE,gCACE,uBAAO0H,QAASrC,EAAEpF,GAAlB,SACE,+BAAOoF,EAAE7E,UAEX,cAAC,IAAD,CACEP,GAAIoF,EAAEpF,GACNE,SAAUqG,EAAOO,aACjBvB,SAAUH,EAAEG,SACZmC,SAAUpH,EAAQ,IAAIqH,KAAKrH,GAAmB,KAC9CsH,WAAW,eACXC,UAAU,eACV9H,KAAMqF,EAAErF,KACRgD,SAAU,SAAAyE,GACJA,GACFjB,EAAOhE,cAAc6C,EAAErF,KAAMyH,EAAKM,eAIvC5B,EAAUd,KAlBHvC,GAsBd,KAAKjD,EAAM+F,QACT,OACE,gCACE,kCACE,+BAAOP,EAAE7E,QACT,cAAC,IAAD,yBACEL,SAAUqG,EAAOO,cACb1B,GAFN,IAGE2B,OAAQ,YAAgC,IAA9BnG,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KACf,OACE,cAAC,IAAD,CACEwD,cAAY,EACZ0D,kBAAmB,SAACf,GAAgC,IAAD,EACjD,OACE,sBAAKR,MAAO,CAACwB,QAAS,OAAQC,WAAY,UAA1C,UACE,qBAAKC,MAAO,GAAIC,IAAG,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAOoB,aAAT,aAAE,EAAcD,IAAKE,IAAI,KAC5C,sCACGrB,QADH,IACGA,OADH,EACGA,EAAOsB,YAKhBC,aAAW,EACXvE,WAAYuC,EAAOO,aACnBxC,gBAAc,EACdvE,KAAMa,EAAMb,KACZO,MAAOM,EAAMN,OAAS,GACtBkI,iBAAkB,SAACzE,EAAQ0E,GACzB,OAAOA,EAAYzG,MAAK,SAAA3B,GAAC,OAAIA,EAAEqI,YAAc3E,EAAO2E,cAEtD3F,SAAU,SAACgB,GAAD,OAAYlD,EAAK0B,cAAc3B,EAAMb,KAAMgE,IACrDS,YAAW,uCAAE,WAAOC,GAAP,eAAArD,EAAA,sEACYkC,MAAM,iBAAD,OAAkBmB,IADnC,cACLjB,EADK,gBAGEA,EAASC,OAHX,mFAAF,+DAUpByC,EAAUd,KAvCHvC,GA2Cd,KAAKjD,EAAMuD,QACT,OACE,gCACE,kCACE,+BACGiC,EAAE7E,QAEL,cAAC,IAAD,2BACM6E,GADN,IAEElF,SAAUqG,EAAOO,aACjBC,OAAQ,SAACC,GACP,OACE,cAAC,EAAD,2BAAaA,GAAb,IAAoB9G,SAAUqG,EAAOO,uBAK5CZ,EAAUd,KAfHvC,GAoBd,KAAKjD,EAAM+I,MAAQ,IAAD,IACVxF,EAAO,oBAAIoD,EAAOtG,cAAX,aAAI,EAAekD,eAAnB,QAA8B,GAE3C,OACE,gCACE,kCACE,+BACGiC,EAAE7E,QAEL,cAAC,IAAD,2BACM6E,GADN,IAEEjC,QAASA,EACT4D,OAAQ,SAACC,GACP,OAAO,cAAC,EAAD,yBAAQ7D,QAASA,GAAa6D,GAA9B,IAAqC9G,UAAW+D,QAAQd,IAAYoD,EAAOO,uBAIvFZ,EAAUd,KAbHvC,GAiBd,QACE,OAAO,yDAAsCuC,EAAE1E,OAA9BmC,SAIxBoD,SCpKI2C,EAjFV,SAAC,GAGC,IAAD,MAFJC,EAEI,EAFJA,SACAvC,EACI,EADJA,SACI,EACwCxF,qBADxC,mBACGgI,EADH,KACmBC,EADnB,OAEkCjI,oBAAS,GAF3C,mBAEGkI,EAFH,KAEgBC,EAFhB,KAIJ,OACE,qCACGH,GAAkBI,MAAMC,QAAQL,IAC/B,qCACE,wBAAOtC,MAAO,CAAC4C,OAAQ,QAASC,eAAgB,WAAY5C,aAAc,IAAKyB,MAAM,OAArF,UACE,gCACA,uCACGW,EAASS,MAAK,SAAAC,GAAC,OAAIA,EAAExJ,OAASF,EAAS8F,kBAD1C,aACG,EAAiDd,OAAQzE,KAAI,SAAAgF,GAAC,OAC7D,oBAAeoB,MAAO,CAAC4C,OAAQ,SAA/B,SAA0ChE,EAAE7E,OAAnC6E,EAAEpF,WAGf,gCACC8I,EAAe1I,KAAI,SAACoJ,EAAOC,GAC1B,OACE,6BACG9F,OAAO1D,OAAOuJ,GAAOpJ,KAAI,SAACC,EAAG8B,GAAJ,OACxB,oBAAIqE,MAAO,CAAC4C,OAAQ,SAApB,SAAoD,kBAAN/I,EAAkB,SAAUA,EAAIA,EAAEN,KAC9E,sBAAKyG,MAAO,CAAEkD,UAAW,UAAzB,UACE,qBAAKxB,MAAO,GAAIC,IAAK9H,EAAE+H,MAAMD,IAAKE,IAAI,KACtC,8BACGhI,EAAEiI,WAGJjI,GAP8B8B,OAF9BsH,WAgBdT,GAAe,wBAAQtG,QAAS,WAC/BuG,GAAe,IADD,8BAKdD,GAAe,wBAAQtG,QAAS,WAChCuG,GAAe,IADA,wBAQnBD,GAAe,cAAC,EAAD,CACbnE,OAAM,UAAEgE,EAASS,MAAK,SAAAC,GAAC,OAAIA,EAAExJ,OAASF,EAAS8F,kBAAzC,aAAE,EAAiDd,OACzDmB,aAAc,SAAA2D,GACZZ,GAAkB,SAAAa,GAAS,OAAKA,GAAaV,MAAMC,QAAQS,GAA5B,sBACvBA,GADuB,CACZD,IACf,CAACA,MAELV,GAAe,IAPJ,SAUb,wBAAQvI,KAAK,SAAb,wBAKHsI,GAAeF,GAAkBI,MAAMC,QAAQL,IAC9C,cAAC,EAAD,CACEjE,OAAM,UAAEgE,EAASS,MAAK,SAAAC,GAAC,OAAIA,EAAExJ,OAASF,EAASgK,mBAAzC,aAAE,EAAkDhF,OAC1DmB,aAAc,SAAA/F,GACZqG,EAASrG,EAAQ6I,IAHrB,SAME,wBAAQpI,KAAK,SAAb,4BCtDKoJ,EAlBV,SAAC,GAGC,IAFLjB,EAEI,EAFJA,SACAvC,EACI,EADJA,SAEA,OACE,mCACE,cAAC,EAAD,CACEzB,OAAQgE,EAASS,MAAK,SAAAlE,GAAC,OAAIA,EAAErF,OAASF,EAASkK,OAAMlF,OACrDmB,aAAcM,EAFhB,SAII,wBAAQ5F,KAAK,SAAb,2BCVV,SAAS4F,EAAS5C,EAAkBsG,GAMlC,IAAMC,EAA+B,CACnCJ,SAAU,GACVK,YAAY,EACZC,MAAO,IAGT,GAAKH,EAkBHC,EAAQJ,SAAWnG,EACnBuG,EAAQE,MAAQH,EAAS5J,KAAI,SAAAgK,GAG3B,MAAO,CACLzE,QAH0DyE,EAArDC,YAILC,cAJ0DF,EAA/B9E,aAK3BiF,cAAc,IAAI5C,MAAO6C,sBAzBhB,CACb,CACE,OAAQ,YAAa,UAAW,MAAO,QAAS,WAAY,WAC5D,OAAQ,UAAW,QAAS,WAAY,SACxCC,SAAQ,SAAA5H,GACRoH,EAAQJ,SAAShH,GAAOa,EAAKb,UAEtBa,EAAKb,MAPD,IAUO8C,EAAwCjC,EAArD2G,YAAoCC,EAAiB5G,EAA/B4B,aAE7B2E,EAAQE,MAAQ,CAAC,CACfxE,UACA2E,gBACAC,cAAc,IAAI5C,MAAO6C,gBAe7B,OAAOlH,MAAM,0CAA2C,CACtDoH,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACnB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAUd,KAEpBe,MAAK,SAAAC,GAAG,OAAIA,EAAIxH,UAGrB,IAwFeyH,EAxFO,WAAO,IAAD,ECxDrB,WAAoB,IAAD,IACQpK,qBADR,mBACjB+H,EADiB,KACPsC,EADO,OAEErK,qBAFF,mBAEjBsK,EAFiB,KAEVC,EAFU,OAGMvK,oBAAkB,GAHxB,mBAGjBwK,EAHiB,KAGRC,EAHQ,KAIlBC,EAAe,IAAIC,gBAAgBC,SAASC,SAASC,OAAOC,UAAU,IACtEC,EAAQ,wBAAUN,EAAaO,IAAI,eAA3B,QAAsC,EAAtC,SAERC,EAAgB7K,sBAAW,sBAAC,8BAAAC,EAAA,6DAChCmK,GAAW,GADqB,kBAIPjI,MAAMwI,GAJC,cAIxBtI,EAJwB,gBAMXA,EAASC,OANE,OAMxBC,EANwB,OAQ9ByH,EAAYzH,GACZ2H,EAAS,MATqB,kDAW9BF,EAAY,MACZE,EAAS,EAAD,IAZsB,yBAc9BE,GAAW,GAdmB,6EAgB/B,CAACO,IAMJ,OAJA1J,qBAAU,WACR4J,MACC,CAACA,IAEG,CACLnD,WACAuC,QACAE,WDyBiCW,GAA5BpD,EADmB,EACnBA,SAAUyC,EADS,EACTA,QAASF,EADA,EACAA,MADA,EAEAtK,oBAAS,GAFT,mBAEnBoL,EAFmB,KAEZC,EAFY,OAGMrL,mBAAwB,MAH9B,mBAGnBsL,EAHmB,KAGTC,EAHS,OAIQvL,mBAAwB,MAJhC,mBAInBwL,EAJmB,KAIRC,EAJQ,OAKUzL,oBAAkB,GAL5B,mBAKnB0L,EALmB,KAKPC,EALO,KAO1BrK,qBAAU,WACJgK,GACF1K,YAAW,WACTgL,OAAOf,SAASgB,KAAOP,IACtB,OAEJ,CAACA,IAEJhK,qBAAU,WAENsJ,SAASb,KAAKrE,MAAMoG,SADlBV,EAC6B,SAEA,UAEhC,CAACA,IAEJ,IAAMW,EAAS1L,sBAAW,uCAAC,WAAOuC,EAAkBsG,GAAzB,eAAA5I,EAAA,6DACzBqL,GAAc,GADW,kBAIAnG,EAAS5C,EAAMsG,GAJf,YAIjBxG,EAJiB,QAMVsJ,QANU,uBAOrBX,GAAS,GAEL3I,EAAS4I,UACXC,EAAY7I,EAAS4I,UAVF,0BAgBnB5I,EAAS4H,OACXmB,EAAa/I,EAAS4H,OAjBD,kDAoBvBe,GAAS,GApBc,yBAsBvBM,GAAc,GAtBS,6EAAD,wDAwBvB,IAEH,GAAInB,EACF,OACE,6CAIJ,GAAIF,EACF,OACE,2CAIJ,IAAM2B,EAAUlE,EACdA,EAAS7G,MAAK,SAAA3B,GAAC,OAAIA,EAAEN,OAASF,EAASkK,OACnC,cAAC,EAAD,CAAYlB,SAAUA,EAAUvC,SAAUuG,IAC1C,cAAC,EAAD,CAAchE,SAAUA,EAAUvC,SAAUuG,IAC9C,KAEJ,OACE,qCACGE,EACAT,GAAa,oBAAI9F,MAAO,CAAEwG,MAAO,OAApB,SAA8BV,IAC3CE,GAAc,4CACf,eAAC,IAAD,CACES,OAAQf,EADV,UAGE,gEACA,wBAAQxJ,QAAS,WACX0J,EACFM,OAAOf,SAASgB,KAAOP,EAEvBD,GAAS,IAJb,uBEzHOe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAAMC,cAAc,SAEpBC,IAAS7G,OACP,cAAC,IAAM8G,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASoC,eAAe,SAM1BZ,M","file":"static/js/main.77c7bfe4.chunk.js","sourcesContent":["export enum Types {\n  product = 'product',\n  serialNumber = 'serialNumber',\n  date = 'date',\n  file = 'file',\n  textInput = 'textInput',\n  email = 'email',\n  country = 'country',\n  state = 'state',\n  phone = 'phone',\n  dropdown = 'dropdown',\n  checkboxes = 'checkboxes',\n}\n\nexport enum Sections {\n  product = 'product',\n  customer = 'customer',\n  all = 'all'\n}\n\nexport type FieldType = keyof typeof Types;\n\nexport type SectionType = keyof typeof Sections;\n\nexport type UniqueId = string;\n\nexport interface FormFieldOption {\n  id: UniqueId;\n  label: string;\n  value: string;\n}\n\nexport interface FormFieldBasic {\n  label: string;\n  name: string;\n  placeholder?: string;\n  default?: string;\n  value: string;\n  description: string;\n  required: boolean;\n  accept?: string;\n  id: UniqueId;\n}\n\nexport interface FormFieldMultiple extends FormFieldBasic {\n  type: Extract<FieldType, 'dropdown' | 'checkboxes'>;\n  options: FormFieldOption[];\n}\n\nexport interface FormSingleField extends FormFieldBasic {\n  type: Exclude<FieldType, 'dropdown' | 'checkboxes'>\n}\n\nexport type FormField = FormSingleField | FormFieldMultiple\n\nexport interface FieldsGroup {\n  name: SectionType;\n  fields: Array<FormField>;\n}\n\nexport interface Product {\n  id: UniqueId;\n  title: string;\n  handle: string;\n  image: {\n    src: string;\n  },\n  variantId: UniqueId;\n}\n\nexport type FormValues = Record<string, string | number | File | Product>\n\n","import React, {InputHTMLAttributes} from 'react';\nimport {Field} from 'formik'\n\nexport const Select: React.FC<InputHTMLAttributes<HTMLInputElement> & {\n  values: {\n    id: string;\n    label: string;\n    value: string;\n  }[]\n}> = ({\n        name,\n        id,\n        values,\n        disabled,\n      }) => {\n  return (\n    <Field as=\"select\" name={name} id={id} disabled={disabled}>\n      <option/>\n      {values.map(v => (\n        <option key={v.id} value={v.value} label={v.label}>{v.label}</option>\n      ))}\n    </Field>\n  )\n}\n","import React, {InputHTMLAttributes} from 'react';\nimport {Field} from 'formik'\n\nexport const Radio: React.FC<InputHTMLAttributes<HTMLInputElement> & {\n  values: {\n    id: string;\n    label: string;\n    value: string;\n  }[]\n}> = ({\n        name,\n        values,\n        id,\n        disabled\n      }) => {\n  return (\n    <div role=\"group\" id={id}>\n      {values.map(v => (\n        <label key={v.id}>\n            <span>\n              {v.label}\n            </span>\n          <Field type=\"radio\" id={v.id} name={name} value={v.value} disabled={disabled} />\n        </label>\n      ))}\n    </div>\n  )\n}\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {FieldProps} from 'formik';\n\ninterface SerialInstance {\n  value: string;\n  valid: boolean;\n  validating: boolean;\n}\n\nexport const Serial: React.FC<FieldProps & {id: string; label: string; disabled: boolean;}> = ({\n  id,\n  label,\n  field,\n  form,\n  disabled\n}) => {\n  const [value, setValue] = useState('');\n  const [submitted, setSubmitted] = useState<SerialInstance[]>([]);\n\n  const validate = useCallback(async (value: SerialInstance): Promise<SerialInstance> => {\n    return new Promise((resolve, reject) => {\n      console.log('Fake api call...');\n\n      setTimeout(() => {\n        if (Math.random() < 0.5) {\n          resolve({ ...value, valid: true, validating: false });\n        } else {\n          resolve({ ...value, valid: false, validating: false });\n        }\n      }, 2000)\n    })\n  }, [])\n\n  const submitIfValid = useCallback(async () => {\n    if (!value || submitted.some(v => v.value === value)) {\n      return\n    }\n\n    const newItem = {\n      value,\n      valid: false,\n      validating: true,\n    };\n    setSubmitted(v => [...v, newItem]);\n    setValue('');\n\n    const result = await validate(newItem)\n\n    setSubmitted(v => v.map(i => {\n      if (i.value === result.value) {\n        return result;\n      }\n\n      return i;\n    }))\n  }, [value, submitted, validate])\n\n  useEffect(() => {\n    const validInstance = submitted.filter(v => v.valid && !v.validating);\n\n    form.setFieldValue(field.name, validInstance.length > 0 ? validInstance.map(v => v.value) : []);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [field.name, submitted])\n\n  return (\n    <div>\n      {submitted.length > 0 && <ul>\n        {submitted.map(s => (\n          <li key={s.value}>\n            {s.value}\n            {' '}\n            {s.validating ? 'Checking...' : (s.valid ? 'OK' : 'FAILURE')}\n            {' '}\n            <button onClick={() => {\n              setSubmitted(v => v.filter(v => v.value !== s.value))\n            }}>\n              Remove\n            </button>\n          </li>\n        ))}\n      </ul>}\n      <label>\n        <span>{label}</span>\n        <input\n          disabled={disabled || submitted.some(s => s.validating)}\n          type=\"text\"\n          onKeyDown={e => {\n            if (e && e.key === 'Enter') {\n              submitIfValid()\n            }\n          }}\n          onBlur={submitIfValid}\n          onChange={e => setValue(e.target.value)}\n          value={value}\n          id={id}\n        />\n      </label>\n    </div>\n  )\n}\n","import React, {memo, useEffect, useState} from 'react';\nimport Select from 'react-select';\nimport {FieldProps} from 'formik';\n\nlet cachedStates:Record<string, Record<string, string>> | null = null;\n\nconst States: React.FC<FieldProps & { country: string; disabled?: boolean }> = ({\n  country,\n  field,\n  form,\n  disabled\n}) => {\n  const [states, setStates] = useState<{value: string; label: string;}[]>([]);\n\n  async function fetchStates(country: string) {\n    let data: Record<string, Record<string, string>>\n\n    if (!cachedStates) {\n      cachedStates = {};\n\n      const response = await fetch(`states.json`, {\n        cache: 'force-cache',\n      });\n      data = await response.json();\n\n      cachedStates = data;\n    } else {\n      data = cachedStates;\n    }\n\n    if (country && country in data) {\n      setStates(\n        Object.entries(data[country] as Record<string, string>)\n        .map(([key, value]) => ({\n          value: key, label: value\n        }))\n      )\n    }\n\n    return [];\n  }\n\n  useEffect(() => {\n    fetchStates(country);\n  }, [form, field, country])\n\n  return (\n    <Select\n      options={states}\n      name={field.name}\n      value={field.value}\n      onChange={(option) => {\n        form.setFieldValue(field.name, option)\n      }}\n      isDisabled={Boolean(disabled)}\n    />\n  )\n}\n\nexport default memo(States)\n","import React, {memo} from 'react';\nimport AsyncSelect from 'react-select/async';\nimport {FieldProps} from 'formik';\n\nlet cachedCountries:Record<string, string> | null = null;\n\nconst Country:React.FC<FieldProps & {disabled: boolean}> = ({\n  field,\n  form,\n  disabled\n}) => {\n  return (\n    <AsyncSelect\n      cacheOptions\n      defaultOptions\n      name={field.name}\n      defaultValue={field.value}\n      isDisabled={disabled}\n      onChange={(option) => {\n        form.setFieldValue('state', '');\n        form.setFieldValue(field.name, (option as any).value);\n      }}\n      loadOptions={async (inputValue: string) => {\n        let data: Record<string, string> | null\n\n        if (!cachedCountries) {\n          const response = await fetch(`countries.json`, {\n            cache: 'force-cache',\n          });\n\n          cachedCountries = await response.json();\n          data = cachedCountries;\n        } else {\n          data = cachedCountries;\n        }\n\n        return Object.entries(data!)\n          .filter(([key, value]) => value.toLowerCase().includes(inputValue.toLowerCase()))\n          .map(([key, value]) => ({\n            value: key, label: value\n          }))\n      }}\n    />\n  )\n}\n\nexport default memo(Country);\n","import * as yup from 'yup';\nimport {FormField, FormValues, Types} from 'types';\n\nexport function createFormValues(fields: FormField[]): FormValues {\n  return fields.reduce((acc, next) => ({\n    ...acc,\n    [next.name]: next.default || '',\n  }), {} as FormValues)\n}\n\nexport function createFormValidation(fields: FormField[]) {\n  const fieldsValidation = fields.reduce((acc, next) => {\n    const f = yup.lazy(v => {\n      if (next.type === Types.serialNumber && next.required) {\n        return yup.array().of(yup.string()).required(`${next.label} is a required field`).min(1).ensure()\n      }\n\n      if (next.type === Types.product && next.required) {\n        return yup.object().required(`${next.label} is a required field`).nullable()\n      }\n\n      if (next.type === Types.email && next.required) {\n        return yup.string().email(`Invalid email`).required(`${next.label} is a required field`)\n      }\n\n      if (next.required) {\n        return yup.string().required(`${next.label} is a required field`)\n      }\n\n      return yup.mixed()\n    })\n\n    return {\n      ...acc,\n      [next.name]: f,\n    };\n  }, {});\n\n  return yup.object().shape(fieldsValidation)\n}\n","import React from 'react';\nimport DatePicker from 'react-datepicker'\nimport {ErrorMessage, Field, FieldProps, Form, Formik} from 'formik';\nimport {FormField, FormValues, Types} from 'types';\nimport {Select} from 'form/components/Select';\n\nimport {Radio} from 'form/components/Radio';\nimport {Serial} from 'form/components/Serial';\nimport States from 'form/components/States';\nimport Country from 'form/components/Country';\nimport {createFormValidation, createFormValues} from 'form/helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport AsyncSelect from 'react-select/async';\n\nconst FormContent: React.FC<{\n  fields: FormField[],\n  handleSubmit: (p: FormValues) => void,\n}> = ({\n  fields,\n  handleSubmit,\n  children\n}) => {\n  const fieldMeta = (f: FormField) => {\n    return (\n      <>\n        {f.description && <div>{f.description}</div>}\n        <ErrorMessage name={f.name}/>\n      </>\n    )\n  }\n\n  return (\n    <Formik\n      initialValues={createFormValues(fields)}\n      validationSchema={createFormValidation(fields)}\n      onSubmit={(values: FormValues) => {\n        handleSubmit(values)\n      }}\n    >\n      {formik => (\n        <Form style={{marginBottom: 30, marginTop: 30}} onSubmit={formik.handleSubmit}>\n          <>\n            {fields.map(f => {\n              const key = [f.id, f.name, f.label].join('');\n\n              switch (f.type) {\n                case Types.textInput:\n                case Types.phone:\n                case Types.email: {\n                  return (\n                    <div key={key}>\n                      <div>\n                        <label>\n                          <span>{f.label}</span>\n                          <Field name={f.name} disabled={formik.isSubmitting} />\n                        </label>\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.serialNumber: {\n                  return (\n                    <div key={key}>\n                      <Field\n                        render={(props: FieldProps) => (\n                          <Serial\n                            {...props}\n                            {...f}\n                            disabled={formik.isSubmitting}\n                          />\n                        )}\n                        {...f}\n                      />\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.file: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        {f.label}\n                      </label>\n                      <div>\n                        <input\n                          disabled={formik.isSubmitting}\n                          accept={f.accept}\n                          type={f.type}\n                          name={f.name}\n                          onChange={(event) => {\n                            formik.setFieldValue(f.name, event?.target?.files?.[0]);\n                          }}\n                        />\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.checkboxes: {\n                  const {options: values, ...restProps} = f;\n\n                  return (\n                    <div key={key}>\n                      <div>\n                        <div>{f.label}</div>\n                        <Radio\n                          disabled={formik.isSubmitting}\n                          {...restProps}\n                          values={values}/>\n                      </div>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.dropdown: {\n                  const {options: values, ...restProps} = f;\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>{f.label}</span>\n                        <Select\n                          {...restProps}\n                          values={values}\n                          disabled={formik.isSubmitting}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.date: {\n                  const value = formik.values[f.name];\n\n                  return (\n                    <div key={key}>\n                      <label htmlFor={f.id}>\n                        <span>{f.label}</span>\n                      </label>\n                      <DatePicker\n                        id={f.id}\n                        disabled={formik.isSubmitting}\n                        required={f.required}\n                        selected={value ? new Date(value as string) : null}\n                        dateFormat=\"MMMM d, yyyy\"\n                        className=\"form-control\"\n                        name={f.name}\n                        onChange={date => {\n                          if (date) {\n                            formik.setFieldValue(f.name, date.toString())\n                          }\n                        }}\n                      />\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.product: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>{f.label}</span>\n                        <Field\n                          disabled={formik.isSubmitting}\n                          {...f}\n                          render={({field, form}: FieldProps) => {\n                            return (\n                              <AsyncSelect\n                                cacheOptions\n                                formatOptionLabel={(props: Record<string, any>) => {\n                                  return (\n                                    <div style={{display: 'flex', alignItems: 'center'}}>\n                                      <img width={32} src={props?.image?.src} alt=\"\"/>\n                                      <span>\n                                        {props?.title}\n                                      </span>\n                                    </div>\n                                  )\n                                }}\n                                isClearable\n                                isDisabled={formik.isSubmitting}\n                                defaultOptions\n                                name={field.name}\n                                value={field.value || ''}\n                                isOptionSelected={(option, selectValue) => {\n                                  return selectValue.some(v => v.variantId === option.variantId)\n                                }}\n                                onChange={(option) => form.setFieldValue(field.name, option)}\n                                loadOptions={async (inputValue: string) => {\n                                  const response = await fetch(`search.json?q=${inputValue}`);\n\n                                  return await response.json();\n                                }}\n                              />\n                            )\n                          }}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                case Types.country: {\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>\n                          {f.label}\n                        </span>\n                        <Field\n                          {...f}\n                          disabled={formik.isSubmitting}\n                          render={(props: FieldProps) => {\n                            return (\n                              <Country {...props} disabled={formik.isSubmitting} />\n                            )\n                          }}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n\n                case Types.state: {\n                  const country = (formik.values?.country ?? '') as string;\n\n                  return (\n                    <div key={key}>\n                      <label>\n                        <span>\n                          {f.label}\n                        </span>\n                        <Field\n                          {...f}\n                          country={country}\n                          render={(props: FieldProps) => {\n                            return <States country={country} {...props} disabled={!Boolean(country) || formik.isSubmitting} />\n                          }}\n                        />\n                      </label>\n                      {fieldMeta(f)}\n                    </div>\n                  )\n                }\n                default:\n                  return <div key={key}>Not implemented field {f.type}</div>\n              }\n            })}\n          </>\n          {children}\n        </Form>\n      )}\n    </Formik>\n  )\n\n}\n\nexport default FormContent;\n","import {FieldsGroup, FormValues, Sections} from 'types';\nimport FormContent from 'form/components';\nimport React, {useState} from 'react';\n\nconst FlowMultiple: React.FC<{\n  formData: FieldsGroup[],\n  onSubmit: (customersData: FormValues, productsData: FormValues[]) => void\n}> = ({\n  formData,\n  onSubmit,\n}) => {\n  const [fulfilledOrder, setFulfilledOrder] = useState<FormValues[] | null>();\n  const [visibleEdit, setVisibleEdit] = useState(false);\n\n  return (\n    <>\n      {fulfilledOrder && Array.isArray(fulfilledOrder) && (\n        <>\n          <table style={{border: 'solid', borderCollapse: 'collapse', marginBottom: 20}} width=\"100%\">\n            <thead>\n            <tr>\n              {formData.find(d => d.name === Sections.product)?.fields!.map(f => (\n                <th key={f.id} style={{border: 'solid'}}>{f.label}</th>))}\n            </tr>\n            </thead>\n            <tbody>\n            {fulfilledOrder.map((order, index) => {\n              return (\n                <tr key={index}>\n                  {Object.values(order).map((v, i) => (\n                    <td style={{border: 'solid'}} key={i}>{typeof v === 'object' ? ('name' in v ? v.name : (\n                      <div style={{ textAlign: 'center' }}>\n                        <img width={32} src={v.image.src} alt=\"\"/>\n                        <div>\n                          {v.title}\n                        </div>\n                      </div>\n                    )) : v}</td>))}\n                </tr>\n              )\n            })}\n            </tbody>\n          </table>\n\n          {visibleEdit && <button onClick={() => {\n            setVisibleEdit(false)\n          }}>ADD NEW PRODUCT\n          </button>}\n\n          {!visibleEdit && <button onClick={() => {\n            setVisibleEdit(true)\n          }}>CANCEL\n          </button>}\n        </>\n      )}\n\n\n      {!visibleEdit && <FormContent\n          fields={formData.find(d => d.name === Sections.product)?.fields!}\n          handleSubmit={productPayload => {\n            setFulfilledOrder(prevState => (prevState && Array.isArray(prevState))\n              ? [...prevState, productPayload]\n              : [productPayload]\n            )\n            setVisibleEdit(true)\n          }}\n      >\n          <button type=\"submit\">\n              Register\n          </button>\n      </FormContent>}\n\n      {visibleEdit && fulfilledOrder && Array.isArray(fulfilledOrder) && (\n        <FormContent\n          fields={formData.find(d => d.name === Sections.customer)?.fields!}\n          handleSubmit={values => {\n            onSubmit(values, fulfilledOrder)\n          }}\n        >\n          <button type=\"submit\">\n            Register\n          </button>\n        </FormContent>\n      )}\n    </>\n  )\n}\n\nexport default FlowMultiple;\n","import React from 'react';\nimport {FieldsGroup, FormValues, Sections} from 'types';\nimport FormContent from '../form/components';\n\nconst FlowSingle: React.FC<{\n  formData: FieldsGroup[],\n  onSubmit: (wholeData: FormValues) => void\n}> = ({\n  formData,\n  onSubmit,\n}) => {\n  return (\n    <>\n      <FormContent\n        fields={formData.find(f => f.name === Sections.all)!.fields}\n        handleSubmit={onSubmit}\n      >\n          <button type=\"submit\">\n            Register\n          </button>\n      </FormContent>\n    </>\n  )\n}\n\nexport default FlowSingle;\n\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {useForm} from 'form/hooks/useForm';\nimport {FormValues, Sections} from './types';\nimport FlowMultiple from 'modules/FlowMultiple';\nimport FlowSingle from 'modules/FlowSingle';\nimport ReactModal from 'react-modal';\n\nfunction onSubmit(data: FormValues, products?: FormValues[]): Promise<{\n  success: true;\n  registeredBefore: true;\n  redirect: false;\n  error?: string ;\n}> {\n  const payload: Record<string, any> = {\n    customer: {},\n    sendEmails: true,\n    items: [],\n  };\n\n  if (!products) {\n    [\n      'name', 'firstName', 'surname', 'dob', 'email', 'address1', 'address2',\n      'city', 'country', 'state', 'postCode', 'phone'\n    ].forEach(key => {\n      payload.customer[key] = data[key]\n\n      delete data[key];\n    })\n\n    const {productName: product, serialNumber: serialNumbers} = data;\n\n    payload.items = [{\n      product,\n      serialNumbers,\n      purchaseDate: new Date().toISOString(),\n    }]\n  } else {\n    payload.customer = data;\n    payload.items = products.map(p => {\n      const {productName: product, serialNumber: serialNumbers} = p;\n\n      return {\n        product,\n        serialNumbers,\n        purchaseDate: new Date().toISOString(),\n      }\n    })\n  }\n\n  return fetch('https://ensdmrncariaqkb.m.pipedream.net', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(payload)\n  })\n    .then(res => res.json())\n}\n\nconst App: React.FC = () => {\n  const {formData, loading, error} = useForm();\n  const [modal, setModal] = useState(false);\n  const [redirect, setRedirect] = useState<string | null>(null)\n  const [postError, setPostError] = useState<string | null>(null)\n  const [submitting, setSubmitting] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (redirect) {\n      setTimeout(() => {\n        window.location.href = redirect\n      }, 5000)\n    }\n  }, [redirect])\n\n  useEffect(() => {\n    if (modal) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n  }, [modal]);\n\n  const submit = useCallback(async (data: FormValues, products?: FormValues[]) => {\n    setSubmitting(true)\n\n    try {\n      const response = await onSubmit(data, products)\n\n      if (response.success) {\n        setModal(true)\n\n        if (response.redirect) {\n          setRedirect(response.redirect)\n        }\n\n        return;\n      }\n\n      if (response.error) {\n        setPostError(response.error)\n      }\n    } catch (e) {\n      setModal(true)\n    } finally {\n      setSubmitting(false)\n    }\n  }, [])\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div>Error...</div>\n    )\n  }\n\n  const content = formData ? (\n    formData.some(v => v.name === Sections.all)\n      ? <FlowSingle formData={formData} onSubmit={submit}/>\n      : <FlowMultiple formData={formData} onSubmit={submit}/>\n  ) : null;\n\n  return (\n    <>\n      {content}\n      {postError && <h3 style={{ color: 'red' }}>{postError}</h3>}\n      {submitting && <h3>Loading...</h3>}\n      <ReactModal\n        isOpen={modal}\n      >\n        <h1>Thanks, registration finished!</h1>\n        <button onClick={() => {\n          if (redirect) {\n            window.location.href = redirect\n          } else {\n            setModal(false)\n          }\n        }}>Ok</button>\n      </ReactModal>\n    </>\n  )\n}\n\nexport default App;\n","import {useCallback, useEffect, useState} from 'react';\nimport {FieldsGroup} from 'types';\n\nexport function useForm() {\n  const [formData, setFormData] = useState<FieldsGroup[] | null>();\n  const [error, setError] = useState<Error | null>()\n  const [loading, setLoading] = useState<boolean>(false)\n  const searchParams = new URLSearchParams(document.location.search.substring(1));\n  const formFile = `form${searchParams.get('step') ?? 2}.json`;\n\n  const fetchFormData = useCallback(async () => {\n    setLoading(true)\n\n    try {\n      const response = await fetch(formFile);\n\n      const data = await response.json();\n\n      setFormData(data);\n      setError(null);\n    } catch (e) {\n      setFormData(null);\n      setError(e as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [formFile])\n\n  useEffect(() => {\n    fetchFormData()\n  }, [fetchFormData])\n\n  return {\n    formData,\n    error,\n    loading,\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nModal.setAppElement('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}